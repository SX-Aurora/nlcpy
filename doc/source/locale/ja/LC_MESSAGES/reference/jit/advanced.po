# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2021, NEC Corporation
# This file is distributed under the same license as the nlcpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nlcpy 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-18 10:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/reference/jit/advanced.rst:7
msgid "Advanced Topics"
msgstr ""

#: ../../source/reference/jit/advanced.rst:9
msgid ""
"This section describes a detailed usage of the JIT compilation "
"functionality."
msgstr ""

#: ../../source/reference/jit/advanced.rst:14
msgid "Compiling from C++ Source"
msgstr ""

#: ../../source/reference/jit/advanced.rst:16
#: ../../source/reference/jit/advanced.rst:55
#: ../../source/reference/jit/advanced.rst:110
msgid "**Definition of the source**"
msgstr ""

#: ../../source/reference/jit/advanced.rst:18
msgid "The entry routine should be defined with ``extern \"C\"``."
msgstr ""

#: ../../source/reference/jit/advanced.rst:31
#: ../../source/reference/jit/advanced.rst:70
#: ../../source/reference/jit/advanced.rst:145
msgid "**Compilation**"
msgstr ""

#: ../../source/reference/jit/advanced.rst:33
msgid ""
"Pass ``'nc++'`` or ``'/opt/nec/ve/bin/nc++'`` into the ``compiler`` "
"argument."
msgstr ""

#: ../../source/reference/jit/advanced.rst:39
#: ../../source/reference/jit/advanced.rst:156
msgid "**Getting the function symbol**"
msgstr ""

#: ../../source/reference/jit/advanced.rst:41
msgid "This is the same procedure as the case that compile from C source."
msgstr ""

#: ../../source/reference/jit/advanced.rst:53
msgid "Compiling from Fortran Source"
msgstr ""

#: ../../source/reference/jit/advanced.rst:72
msgid ""
"Pass ``'nfort'`` or ``'/opt/nec/ve/bin/nfort'`` into the ``compiler`` "
"argument."
msgstr ""

#: ../../source/reference/jit/advanced.rst:78
msgid "**Getting the subroutine or function symbol**"
msgstr ""

#: ../../source/reference/jit/advanced.rst:80
msgid "You should add ``_`` to the end of the function name."
msgstr ""

#: ../../source/reference/jit/advanced.rst:92
msgid "The Fortran source code is generated internally with the suffix ``.f03``"
msgstr ""

#: ../../source/reference/jit/advanced.rst:94
msgid ""
"To preprocess before the compilation, please specify ``'-fpp'`` option "
"into the ``cflags``."
msgstr ""

#: ../../source/reference/jit/advanced.rst:95
msgid ""
"To enable source code to be described in fixed form, please specify "
"``'-ffixed-form'`` option into the ``cflags``."
msgstr ""

#: ../../source/reference/jit/advanced.rst:98
msgid ""
"For details, please refer to the Fortran Compiler User's Guide from `here"
" <https://www.hpc.nec/documentation>`_."
msgstr ""

#: ../../source/reference/jit/advanced.rst:102
msgid "Transferring Ndarray Attributes to VE"
msgstr ""

#: ../../source/reference/jit/advanced.rst:104
msgid ""
"NLCPy provides a easy way to access :class:`nlcpy.ndarray` attributes "
"from VE side."
msgstr ""

#: ../../source/reference/jit/advanced.rst:106
msgid "Restriction"
msgstr ""

#: ../../source/reference/jit/advanced.rst:108
msgid ""
"Accessing :class:`nlcpy.ndarray` attributes from Fortran has not "
"supported yet."
msgstr ""

#: ../../source/reference/jit/advanced.rst:112
msgid ""
"You should include ``nlcpy.h`` in C/C++ source and use ``ve_array`` "
"structure."
msgstr ""

#: ../../source/reference/jit/advanced.rst:114
msgid "Here is a example of 2-D element-wise addition."
msgstr ""

#: ../../source/reference/jit/advanced.rst:143
msgid ""
"For details of the C-structure, please refer to the :ref:`C Interfaces "
"<label_c_interface>`."
msgstr ""

#: ../../source/reference/jit/advanced.rst:147
msgid "By default, only pass source code into the ``code`` argument."
msgstr ""

#: ../../source/reference/jit/advanced.rst:153
msgid ""
"If you specify ``cflags`` argument, it is necessary to add the including "
"path that can be retrieved from :func:`nlcpy.get_include`."
msgstr ""

#: ../../source/reference/jit/advanced.rst:158
msgid ""
"Pass ``'void *'`` or ``ve_types.void_p`` into the ``args_type`` elements "
"that corresponding to the ``ve_array`` structure in the VE side argument."
msgstr ""

#: ../../source/reference/jit/advanced.rst:169
msgid "**Execution**"
msgstr ""

#: ../../source/reference/jit/advanced.rst:171
msgid ""
"Pass a :class:`nlcpy.ndarray` object into the argument of the "
":meth:`CustomVEKernel.__call__`."
msgstr ""

#: ../../source/reference/jit/advanced.rst:189
msgid "C Interfaces"
msgstr ""

#: ../../source/reference/jit/advanced.rst:193
msgid ""
"The ``ve_array`` C-structure contains the required information for a "
":class:`nlcpy.ndarray`. All instances of a :class:`nlcpy.ndarray` will "
"have this structure."
msgstr ""

#: ../../source/reference/jit/advanced.rst:196
msgid "The members of the ``ve_array`` are as follows:"
msgstr ""

#: ../../source/reference/jit/advanced.rst:200
msgid "The address point to the first element of the array."
msgstr ""

#: ../../source/reference/jit/advanced.rst:204
msgid "The number of dimensions in the array."
msgstr ""

#: ../../source/reference/jit/advanced.rst:208
msgid "The total size of the array."
msgstr ""

#: ../../source/reference/jit/advanced.rst:212
msgid ""
"The shapes of the array. An array of integers providing the shape in each"
" dimension."
msgstr ""

#: ../../source/reference/jit/advanced.rst:215
msgid ""
"Given a :class:`nlcpy.ndarray` from ``nlcpy.empty((3, 4, 5))``, the "
"``shape`` of C-structer is::"
msgstr ""

#: ../../source/reference/jit/advanced.rst:227
msgid ""
"The strides of the array. An array of integers providing for each "
"dimension the number of bytes that must be skipped to get to the next "
"element in that dimension"
msgstr ""

#: ../../source/reference/jit/advanced.rst:231
msgid ""
"Given a :class:`nlcpy.ndarray` from ``nlcpy.empty((3, 4, 5))``, the "
"``strides`` of C-structer is::"
msgstr ""

#: ../../source/reference/jit/advanced.rst:245
msgid "The data type of the array. The correspondence values is below:"
msgstr ""

#: ../../source/reference/jit/advanced.rst:267
msgid "This enum data can be defined by ``nlcpy.h``."
msgstr ""

#: ../../source/reference/jit/advanced.rst:271
msgid "The number of bytes for one element of the array."
msgstr ""

#: ../../source/reference/jit/advanced.rst:275
msgid ""
"Whether the array is C-style contiguous order or not. ``1`` means yes, "
"``0`` means no."
msgstr ""

#: ../../source/reference/jit/advanced.rst:280
msgid ""
"Whether the array is Fortran-style contiguous order or not. ``1`` means "
"yes, ``0`` means no."
msgstr ""

#: ../../source/reference/jit/advanced.rst:285
msgid "Transferring Buffer data to VE"
msgstr ""

#: ../../source/reference/jit/advanced.rst:287
msgid ""
"Python objects that support the buffer interface can be transfered to the"
" VE arguments by using ``nlcpy.veo.OnStack``."
msgstr ""

#: ../../source/reference/jit/advanced.rst:319
msgid ""
"For details of ``OnStack``, please refer to the `py-veo project "
"<https://github.com/SX-Aurora/py-veo>`_."
msgstr ""

#: ../../source/reference/jit/advanced.rst:323
msgid "Customizing Compiler Options"
msgstr ""

#: ../../source/reference/jit/advanced.rst:325
msgid "Cflags and ldflags can be customized from a tuple of string elements."
msgstr ""

#: ../../source/reference/jit/advanced.rst:335
msgid "FTRACE can be enabled from the ``ftrace`` argument."
msgstr ""

#: ../../source/reference/jit/advanced.rst:344
msgid "You can also use NLC routines just by enabling  the ``use_nlc`` argument."
msgstr ""

#: ../../source/reference/jit/advanced.rst:361
msgid ""
"When enabling the ``use_nlc`` flag, the following libraries will be "
"linked internally:"
msgstr ""

#: ../../source/reference/jit/advanced.rst:363
msgid "libasl_openmp_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:364
msgid "libaslfftw3_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:365
msgid "liblapack_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:366
msgid "libblas_openmp_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:367
msgid "libsca_openmp_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:368
msgid "libheterosolver_openmp_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:369
msgid "libsblas_openmp_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:370
msgid "libcblas_i64"
msgstr ""

#: ../../source/reference/jit/advanced.rst:374
msgid "Only the OpenMP & 64bit integer version of the NLC can be used."
msgstr ""

#: ../../source/reference/jit/advanced.rst:378
msgid ""
"If you enable the ``use_nlc`` flag with Fortran source, you should add "
"the option ``'-fdefault-integer=8'`` to the ``cflags``."
msgstr ""

#: ../../source/reference/jit/advanced.rst:383
msgid ""
"If you use ASL Unified Interface, you should not call following functions"
" because there will be internally called at the beginning/end of the "
"NLCPy process."
msgstr ""

#: ../../source/reference/jit/advanced.rst:386
msgid "``asl_library_initialize()``"
msgstr ""

#: ../../source/reference/jit/advanced.rst:387
msgid "``asl_library_finalize()``"
msgstr ""

#: ../../source/reference/jit/advanced.rst:390
msgid ""
"For the notices of compiler options, please refer to the `aveo "
"documentation <https://www.hpc.nec/documents/veos/en/aveo/index.html>`_."
msgstr ""

#: ../../source/reference/jit/advanced.rst:397
msgid "Callback Setting"
msgstr ""

#: ../../source/reference/jit/advanced.rst:399
msgid ""
"The Python function set into the ``callback`` argument will be executed "
"when the result of the VE function will be retrieved. The callback "
"function should take a one argument that is corresponding to the return "
"value of the VE function."
msgstr ""

#: ../../source/reference/jit/advanced.rst:411
msgid "Here, we show a simple example that uses a callback function."
msgstr ""

#: ../../source/reference/jit/advanced.rst:413
msgid "The following code will be used for the example:"
msgstr ""

#: ../../source/reference/jit/advanced.rst:456
msgid "Prepare the executable object:"
msgstr ""

#: ../../source/reference/jit/advanced.rst:467
msgid "Define the callback function:"
msgstr ""

#: ../../source/reference/jit/advanced.rst:479
msgid "Execute some patterns with the callback function:"
msgstr ""

#: ../../source/reference/jit/advanced.rst:505
msgid ""
"When you enable ``sync`` flag, the return value of the VE function can be"
" retrieved from the return value of :meth:`CustomVEKernel.__call__`."
msgstr ""

#: ../../source/reference/jit/advanced.rst:516
msgid "Logging Compiler Output"
msgstr ""

#: ../../source/reference/jit/advanced.rst:518
msgid "**Logging to standard output**"
msgstr ""

#: ../../source/reference/jit/advanced.rst:525
msgid "**Logging to file stream**"
msgstr ""

