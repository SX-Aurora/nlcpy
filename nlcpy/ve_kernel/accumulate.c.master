/*
#
# * The source code in this file is developed independently by NEC Corporation.
#
# # NLCPy License #
#
#     Copyright (c) 2020-2021 NEC Corporation
#     All rights reserved.
#
#     Redistribution and use in source and binary forms, with or without
#     modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither NEC Corporation nor the names of its contributors may be
#       used to endorse or promote products derived from this software
#       without specific prior written permission.
#
#     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
*/
@#include <stdio.h>
@#include <stdint.h>
@#include <stdbool.h>
@#include <stdlib.h>
@#include <limits.h>
@#include <alloca.h>
@#include <assert.h>

@#include "nlcpy.h"

#define_switch (x->dtype)

/***************************
 *
 *       ACCUMULATE OPERATOR
 *
 * *************************/

uint64_t FILENAME(ve_arguments *args, int32_t *psw)
{
    ve_array *x = &(args->accumulate.x);
    ve_array *y = &(args->accumulate.y);
    ve_array *w = &(args->accumulate.w);
    int32_t axis = args->accumulate.axis;
    int32_t dtype = args->accumulate.dtype;

    uint64_t err = NLCPY_ERROR_OK;
#begin_switch
    if (y->dtype==w->dtype) {
        switch (y->dtype) {
#if defined(DTAG_i32)
        case ve_i32:  err = FILENAME_@DTAG1@_i32 (x, y, axis, psw); break;
#endif
#if defined(DTAG_i64)
        case ve_i64:  err = FILENAME_@DTAG1@_i64 (x, y, axis, psw); break;
#endif
#if defined(DTAG_u32)
        case ve_u32:  err = FILENAME_@DTAG1@_u32 (x, y, axis, psw); break;
#endif
#if defined(DTAG_u64)
        case ve_u64:  err = FILENAME_@DTAG1@_u64 (x, y, axis, psw); break;
#endif
#if defined(DTAG_f32)
        case ve_f32:  err = FILENAME_@DTAG1@_f32 (x, y, axis, psw); break;
#endif
#if defined(DTAG_f64)
        case ve_f64:  err = FILENAME_@DTAG1@_f64 (x, y, axis, psw); break;
#endif
#if defined(DTAG_c64)
        case ve_c64:  err = FILENAME_@DTAG1@_c64 (x, y, axis, psw); break;
#endif
#if defined(DTAG_c128)
        case ve_c128: err = FILENAME_@DTAG1@_c128(x, y, axis, psw); break;
#endif
#if defined(DTAG_bool)
        case ve_bool: err = FILENAME_@DTAG1@_bool(x, y, axis, psw); break;
#endif
        default: return (uint64_t)NLCPY_ERROR_DTYPE;
        }
    } else {
        switch(w->dtype) {
#if defined(DTAG_i32)
        case ve_i32:  err = FILENAME_@DTAG1@_i32 (x, w, axis, psw); break;
#endif
#if defined(DTAG_i64)
        case ve_i64:  err = FILENAME_@DTAG1@_i64 (x, w, axis, psw); break;
#endif
#if defined(DTAG_u32)
        case ve_u32:  err = FILENAME_@DTAG1@_u32 (x, w, axis, psw); break;
#endif
#if defined(DTAG_u64)
        case ve_u64:  err = FILENAME_@DTAG1@_u64 (x, w, axis, psw); break;
#endif
#if defined(DTAG_f32)
        case ve_f32:  err = FILENAME_@DTAG1@_f32 (x, w, axis, psw); break;
#endif
#if defined(DTAG_f64)
        case ve_f64:  err = FILENAME_@DTAG1@_f64 (x, w, axis, psw); break;
#endif
#if defined(DTAG_c64)
        case ve_c64:  err = FILENAME_@DTAG1@_c64 (x, w, axis, psw); break;
#endif
#if defined(DTAG_c128)
        case ve_c128: err = FILENAME_@DTAG1@_c128(x, w, axis, psw); break;
#endif
#if defined(DTAG_bool)
        case ve_bool: err = FILENAME_@DTAG1@_bool(x, w, axis, psw); break;
#endif
        default: return (uint64_t)NLCPY_ERROR_DTYPE;
        }

@#ifdef _OPENMP
@#pragma omp barrier
@#endif /* _OPENMP */

        int32_t pswc;
        ve_array where;
        err |= nlcpy_cast (w, y, 0, where, &pswc);
//        switch (y->dtype) {
//#if defined(DTAG_OUT_i32)
//        case ve_i32:  err |= nlcpy_cast_i32 (w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_i64)
//        case ve_i64:  err |= nlcpy_cast_i64 (w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_u32)
//        case ve_u32:  err |= nlcpy_cast_u32 (w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_u64)
//        case ve_u64:  err |= nlcpy_cast_u64 (w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_f32)
//        case ve_f32:  err |= nlcpy_cast_f32 (w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_f64)
//        case ve_f64:  err |= nlcpy_cast_f64 (w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_c64)
//        case ve_c64:  err |= nlcpy_cast_c64 (w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_c128)
//        case ve_c128: err |= nlcpy_cast_c128(w, y, 0, where, &pswc); break;
//#endif
//#if defined(DTAG_OUT_bool)
//        case ve_bool: err |= nlcpy_cast_bool(w, y, 0, where, &pswc); break;
//#endif
//        default: return (uint64_t)NLCPY_ERROR_DTYPE;
//        }
        *psw |= pswc;
    }
#end_switch
    return (uint64_t)err;
}
