/*
#
# * The source code in this file is developed independently by NEC Corporation.
#
# # NLCPy License #
# 
#     Copyright (c) 2020 NEC Corporation
#     All rights reserved.
#     
#     Redistribution and use in source and binary forms, with or without
#     modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither NEC Corporation nor the names of its contributors may be
#       used to endorse or promote products derived from this software
#       without specific prior written permission.
#     
#     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
*/

@#include <stdio.h>
@#include <stdint.h>
@#include <stdbool.h>
@#include <stdlib.h>
@#include <limits.h>
@#include <alloca.h>
@#include <assert.h>

@#include "nlcpy.h"

#define_switch (a_src->dtype:bool,i32,i64,u32,u64,f32,f64,c64,c128)


@#ifdef __cplusplus
extern "C" {
@#endif

/* dummy implementation */
uint64_t nlcpy_stack_array(
            ve_array *a_src,
            ve_array *a_dst
) {
    assert(a_src->dtype == a_dst->dtype);
    assert(a_src->ndim < 2);
    assert(a_dst->ndim < 2);
    int64_t str_src = a_src->strides[0] / a_src->itemsize;
    int64_t str_dst = a_dst->strides[0] / a_dst->itemsize;

#begin_switch
    @TYPE1@ * dat_src = (@TYPE1@ *) a_src->ve_adr;
    @TYPE1@ * dat_dst = (@TYPE1@ *) a_dst->ve_adr;
    for (int64_t i = 0; i < a_dst->size; i++) {
        int64_t j = i % a_src->size;
        dat_dst[i * str_dst] = dat_src[j * str_src];
    }
#end_switch
    return 0;
}


@#ifdef __cplusplus
}
@#endif
