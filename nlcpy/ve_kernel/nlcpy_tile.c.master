/*
#
# * The source code in this file is developed independently by NEC Corporation.
#
# # NLCPy License #
#
#     Copyright (c) 2020-2021 NEC Corporation
#     All rights reserved.
#
#     Redistribution and use in source and binary forms, with or without
#     modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither NEC Corporation nor the names of its contributors may be
#       used to endorse or promote products derived from this software
#       without specific prior written permission.
#
#     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
*/
@#include <stdio.h>
@#include <stdint.h>
@#include <stdbool.h>
@#include <stdlib.h>
@#include <limits.h>
@#include <alloca.h>
@#include <assert.h>

@#include "nlcpy.h"
#define_switch (a->dtype:bool,i32,i64,u32,u64,f32,f64,c64,c128)

uint64_t nlcpy_tile(ve_arguments *args, int32_t *psw)
{
    int64_t i, j, k;
    ve_array *a = &(args->tile.a);
    ve_array *b = &(args->tile.b);

    // a is created to have the same ndim as b in tiling.py
    int64_t n_inner = a->ndim - 1;
    int64_t n_outer = 0;

#begin_switch
    @TYPE1@ *pa = (@TYPE1@ *)a->ve_adr;
    @TYPE1@ *pb = (@TYPE1@ *)b->ve_adr;

    // a is created from 0-d array
    if (a->size == 1) {
        for (i = 0; i < b->size; i++) pb[i] = pa[0];
        return 0;
    }

    // a is created from 1-d array
    if (a->size == a->shape[n_inner]) {
        for (i = 0; i < b->size; i++) pb[i] = pa[i % a->size];
        return 0;
    }

    int64_t *idx = (int64_t*)alloca(sizeof(int64_t) * a->ndim);
    nlcpy__rearrange_axis(a, idx);

@#ifdef _OPENMP
    const int nt = omp_get_num_threads();
    const int it = omp_get_thread_num();
@#else
    const int nt = 1;
    const int it = 0;
@#endif
    const int64_t n_inner2 = idx[n_inner];
    const int64_t n_outer2 = idx[n_outer];
    const int64_t cntm_s = b->shape[n_outer2] * it / nt;
    const int64_t cntm_e = b->shape[n_outer2] * (it + 1) / nt;
    int64_t *astep = (int64_t*)alloca(sizeof(int64_t) * a->ndim);
    int64_t *bstep = (int64_t*)alloca(sizeof(int64_t) * b->ndim);
    for (i = 0; i < a->ndim; i++) astep[i] = a->strides[i] / a->itemsize;
    for (i = 0; i < b->ndim; i++) bstep[i] = b->strides[i] / b->itemsize;

    for (int64_t cntm = cntm_s; cntm < cntm_e; cntm++) {
        int64_t ia = (cntm % a->shape[n_outer2]) * astep[n_outer2];
        int64_t ib = cntm * bstep[n_outer2];
        int64_t *cnt = (int64_t*)alloca(sizeof(int64_t) * b->ndim);
        nlcpy__reset_coords(cnt, b->ndim);
        do {
            for (i = 0; i < b->shape[n_inner2]; i++) {
                pb[i * bstep[n_inner2] + ib] = pa[(i % a->shape[n_inner2]) * astep[n_inner2] + ia];
            }
            for (k = n_inner - 1; k > 0; k--) {
                int64_t kk = idx[k];
                if (++cnt[kk] < b->shape[kk]) {
                    ib += bstep[kk];
                    if (cnt[kk] % a->shape[kk] == 0) {
                        ia -= astep[kk] * (a->shape[kk] - 1);
                    } else {
                        ia += astep[kk];
                    }
                    break;
                }
                ib -= bstep[kk] * (b->shape[kk] - 1);
                ia -= astep[kk] * (a->shape[kk] - 1);
                cnt[kk] = 0;
            }
        } while (k > 0);
    }
#end_switch
    return 0;
}

