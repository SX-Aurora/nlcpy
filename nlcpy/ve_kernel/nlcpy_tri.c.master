/*
#
# * The source code in this file is developed independently by NEC Corporation.
#
# # NLCPy License #
#
#     Copyright (c) 2020-2021 NEC Corporation
#     All rights reserved.
#
#     Redistribution and use in source and binary forms, with or without
#     modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither NEC Corporation nor the names of its contributors may be
#       used to endorse or promote products derived from this software
#       without specific prior written permission.
#
#     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#     FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
*/
@#include <stdio.h>
@#include <stdint.h>
@#include <stdbool.h>
@#include <stdlib.h>
@#include <limits.h>
@#include <alloca.h>
@#include <assert.h>

@#include "nlcpy.h"
#define_switch (out->dtype:bool,i32,i64,u32,u64,f32,f64,c64,c128)

uint64_t nlcpy_tri(ve_arguments *args, int32_t *psw)
{
    ve_array *out = &(args->tri.out);
    int64_t k = args->tri.k;

@#ifdef _OPENMP
    const int nt = omp_get_num_threads();
    const int it = omp_get_thread_num();
@#else
    const int nt = 1;
    const int it = 0;
@#endif
#begin_switch
    @TYPE1@ *pout = (@TYPE1@ *)out->ve_adr;
    if (pout == NULL) {
        return NLCPY_ERROR_MEMORY;
    }
    if (out->shape[0] >= out->shape[1]) {
        const int64_t is = out->shape[1] * it / nt;
        const int64_t ie = out->shape[1] * (it + 1) / nt;
        const int64_t iinner = out->strides[0] / out->itemsize;
        const int64_t iouter = out->strides[1] / out->itemsize;
        for (int64_t i = is; i < ie; i++) {
            int64_t iout = i * iouter;
            for (int64_t j = 0; j < out->shape[0]; j++) {
                pout[iout + j * iinner] = (i - j <= k) ? 1 : 0;
            }
        }
    } else {
        const int64_t is = out->shape[0] * it / nt;
        const int64_t ie = out->shape[0] * (it + 1) / nt;
        const int64_t iinner = out->strides[1] / out->itemsize;
        const int64_t iouter = out->strides[0] / out->itemsize;
        for (int64_t i = is; i < ie; i++) {
            int64_t iout = i * iouter;
            for (int64_t j = 0; j < out->shape[1]; j++) {
                pout[iout + j * iinner] = (j - i <= k) ? 1 : 0;
            }
        }
    }
#end_switch
    return 0;
}

